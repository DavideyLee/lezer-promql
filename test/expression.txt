# Numeric literals

0.123e3

==>

Expr(NumberLiteral)

# Double-quoted string literal

"test string"

==>

Expr(StringLiteral)

# Single-quoted string literal

'test string'

==>

Expr(StringLiteral)

# Backtick-quoted string literal

`test string`

==>

Expr(StringLiteral)

# Backtick-quoted multi-line string literal

`test

string`

==>

Expr(StringLiteral)

# Addition

1 + 2

==>

Expr(BinaryExpr(Expr(NumberLiteral), BinOp, BoolModifier, BinModifier(GroupModifiers), Expr(NumberLiteral)))

# Complex expression

sum by(job, mode) (rate(node_cpu_seconds_total[1m])) / on(job) group_left sum by(job)(rate(node_cpu_seconds_total[1m]))

==>

Expr(
  BinaryExpr(
    Expr(
      AggregateExpr(
        AggregateOp(Sum),
        AggregateModifier(
          By,
          GroupingLabels(
            GroupingLabelList(
              GroupingLabelList(
                GroupingLabel(LabelName)
              ),
              GroupingLabel(LabelName)
            )
          )
        ),
        FunctionCallBody(
          FunctionCallArgs(
            Expr(
              FunctionCall(
                FunctionIdentifier(rate),
                FunctionCallBody(
                  FunctionCallArgs(
                    Expr(
                      MatrixSelector(
                        Expr(
                          VectorSelector(
                            MetricIdentifier(
                              Identifier
                            )
                          )
                        ),
                        Duration
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    ),
    BinOp,
    BoolModifier,
    BinModifier(
      GroupModifiers(
        OnOrIgnoring(
          On,
          GroupingLabels(
            GroupingLabelList(
              GroupingLabel(LabelName)
            )
          )
        ),
        GroupLeft,
        MaybeGroupingLabels
      )
    ),
    Expr(
      AggregateExpr(
        AggregateOp(Sum),
        AggregateModifier(
          By,
          GroupingLabels(
            GroupingLabelList(
              GroupingLabel(LabelName)
            )
          )
        ),
        FunctionCallBody(
          FunctionCallArgs(
            Expr(
              FunctionCall(
                FunctionIdentifier(rate),
                FunctionCallBody(
                  FunctionCallArgs(
                    Expr(
                      MatrixSelector(
                        Expr(
                          VectorSelector(
                            MetricIdentifier(
                              Identifier
                            )
                          )
                        ),
                        Duration
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

# Case insensitivity for aggregations and binop modifiers.

SuM BY(testlabel1) (testmetric1) / IGNOring(testlabel2) AVG withOUT(testlabel3) (testmetric2)

==>

Expr(
  BinaryExpr(
    Expr(
      AggregateExpr(
        AggregateOp(Sum),
        AggregateModifier(
          By,
          GroupingLabels(
            GroupingLabelList(
              GroupingLabel(LabelName)
            )
          )
        ),
        FunctionCallBody(
          FunctionCallArgs(
            Expr(
              VectorSelector(
                MetricIdentifier(Identifier)
              )
            )
          )
        )
      )
    ),
    BinOp,
    BoolModifier,
    BinModifier(
      GroupModifiers(
        OnOrIgnoring(
          Ignoring,
          GroupingLabels(
            GroupingLabelList(
              GroupingLabel(LabelName)
            )
          )
        )
      )
    ),
    Expr(
      AggregateExpr(
        AggregateOp(Avg),
        AggregateModifier(
          Without,
          GroupingLabels(
            GroupingLabelList(
              GroupingLabel(LabelName)
            )
          )
        ),
        FunctionCallBody(
          FunctionCallArgs(
            Expr(
              VectorSelector(
                MetricIdentifier(
                  Identifier
                )
              )
            )
          )
        )
      )
    )
  )
)

# Case insensitivity for set operators

metric1 and metric2 AND metric3 unless metric4 UNLESS metric5 or metric6 OR metric7

==>

Expr(
  BinaryExpr(
    Expr(
      BinaryExpr(
        Expr(
          BinaryExpr(
            Expr(
              BinaryExpr(
                Expr(
                  BinaryExpr(
                    Expr(
                      BinaryExpr(
                        Expr(
                          VectorSelector(
                            MetricIdentifier(Identifier)
                          )
                        ),
                        And,
                        BoolModifier,
                        BinModifier(GroupModifiers),
                        Expr(
                          VectorSelector(
                            MetricIdentifier(Identifier)
                          )
                        )
                      )
                    ),
                    And,
                    BoolModifier,
                    BinModifier(GroupModifiers),
                    Expr(
                      VectorSelector(
                        MetricIdentifier(Identifier)
                      )
                    )
                  )
                ),
                Unless,
                BoolModifier,
                BinModifier(GroupModifiers),
                Expr(
                  VectorSelector(
                    MetricIdentifier(Identifier)
                  )
                )
              )
            ),
            Unless,
            BoolModifier,
            BinModifier(GroupModifiers),
            Expr(
              VectorSelector(
                MetricIdentifier(Identifier)
              )
            )
          )
        ),
        Or,
        BoolModifier,
        BinModifier(GroupModifiers),
        Expr(
          VectorSelector(
            MetricIdentifier(Identifier)
          )
        )
      )
    ),
    Or,
    BoolModifier,
    BinModifier(GroupModifiers),
    Expr(
      VectorSelector(
        MetricIdentifier(Identifier)
      )
    )
  )
)

# Duration units

foo[1y2m3d4h5m6s7ms]

==>

Expr(MatrixSelector(Expr(VectorSelector(MetricIdentifier(Identifier))),Duration))
